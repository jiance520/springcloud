<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>f8xn</artifactId>
        <groupId>top.f8xn</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>eurekaserver</artifactId>
    <packaging>jar</packaging>

    <name>${project.artifactId}</name>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <spring-cloud.version>Greenwich.SR5</spring-cloud.version>
        <!-- 新增docker镜像名称配置 -->
        <docker.image.prefix>f8xn</docker.image.prefix>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
            <!--<version>2.1.5.RELEASE</version>-->
        </dependency>
        <!-- Sprig Boot/SpringJUnit支持 测试支持,spring-boot-starter-test中已经集成了junit4.12，org.springframework:spring-test-->
        <!--spring-boot-starter-test 和org.springframework.boot:spring-boot-test两者的依赖包一样-->
        <!--<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            &lt;!&ndash;test，只在测试时使用，用于编译和运行测试代码。不会随项目发布。&ndash;&gt;
            <scope>test</scope>
            &lt;!&ndash;<version>2.1.12.RELEASE</version>&ndash;&gt;
        </dependency>-->
        <!-- web支持，SpringMVC， Servlet支持等 -->
        <!--要加，否则接口不返回数据，rundashboard不显示端口？-->
        <!--<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            &lt;!&ndash;<version>2.1.12.RELEASE</version>&ndash;&gt;
        </dependency>-->
    </dependencies>

    <build>
        <finalName>${project.artifactId}</finalName>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <!--使用docker-maven-plugin插件-->
<!--            <plugin>-->
<!--                <groupId>com.spotify</groupId>-->
<!--                <artifactId>docker-maven-plugin</artifactId>-->
<!--                <version>1.0.0</version>-->
<!--                &lt;!&ndash;将插件绑定在某个phase执行&ndash;&gt;-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        <id>build-image</id>-->
<!--                        &lt;!&ndash;将插件绑定在package这个phase上。也就是说，-->
<!--                        用户只需执行mvn package ，就会自动执行mvn docker:build,Terminal下执行报错,只能在右边手动双击&ndash;&gt;-->
<!--                        <phase>package</phase>-->
<!--                        <goals>-->
<!--                            <goal>build</goal>-->
<!--                        </goals>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--                <configuration>-->
<!--                    &lt;!&ndash;指定生成的镜像名,这里是我们的docker镜像名/项目名&ndash;&gt;-->
<!--                    <imageName>${docker.image.prefix}/${project.artifactId}</imageName>-->
<!--                    &lt;!&ndash;指定标签 这里指定的是镜像的版本，我们默认版本是latest&ndash;&gt;-->
<!--                    <imageTags>-->
<!--                        <imageTag>latest</imageTag>-->
<!--                    </imageTags>-->
<!--                    &lt;!&ndash; 指定我们项目中Dockerfile文件的路径，可不加${project.basedir}&ndash;&gt;-->
<!--                    <dockerDirectory>${project.basedir}</dockerDirectory>-->

<!--                    &lt;!&ndash;指定远程docker 地址,必须开放端口-，要加http://&ndash;&gt;-->
<!--                    &lt;!&ndash;docker-maven-plugin上传镜像到远程私有仓库https://blog.csdn.net/u013326684/article/details/99350372&ndash;&gt;-->
<!--                    <dockerHost>http://217.196.49.213:2376</dockerHost>-->
<!--                    &lt;!&ndash;https://cr.console.aliyun.com/cn-shenzhen/instances/repositories&ndash;&gt;-->
<!--                    &lt;!&ndash; 这里是复制 jar 包到 docker 容器指定目录配置 &ndash;&gt;-->
<!--                    <resources>-->
<!--                        <resource>-->
<!--                            <targetPath>/</targetPath>-->
<!--                            &lt;!&ndash;jar包所在的路径  此处配置的即对应项目中target目录&ndash;&gt;-->
<!--                            <directory>${project.build.directory}</directory>-->
<!--                            &lt;!&ndash; 需要包含的 jar包 ，这里对应的是 Dockerfile中添加的文件名,缺省为${project.artifactId}-${project.version}　&ndash;&gt;-->
<!--                            <include>${project.build.finalName}.jar</include>-->
<!--                        </resource>-->
<!--                    </resources>-->
<!--                </configuration>-->
<!--            </plugin>-->
        </plugins>
    </build>

</project>
